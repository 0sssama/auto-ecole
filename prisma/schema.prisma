// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model School {
//     id Int @id @default(autoincrement())

//     name String

//     admins      Admin[]
//     students    Student[]
//     instructors Instructor[]
//	   vehicles    Vehicle[]

//     cashFund    CashFund

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//	   createdAt DateTime @default(now())
// }

model Admin {
    id Int @id @default(autoincrement())

    username   String    @unique
    clerkId    String    @unique
    clerkOrgId String
    fullName   String
    rank       AdminRank

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    licenseFilesCreated LicenseFile[]
    instructorsCreated  Instructor[]
    paymentsCreated     Payment[]
    expensesCreated     Expense[]
    studentsCreated     Student[]
    vehiclesCreated     Vehicle[]
    lessonsCreated      Lesson[]
}

model Student {
    id          Int    @id @default(autoincrement())
    clerkUserId String @unique
    clerkOrgId  String

    firstNameFr String
    firstNameAr String

    lastNameFr String
    lastNameAr String

    addressFr String
    addressAr String

    professionFr String
    professionAr String

    phone     String
    cin       String
    email     String
    birthdate DateTime

    cinFile        String @default("")
    profilePicture String @default("")

    archived     Boolean   @default(false)
    archivedDate DateTime?

    previousLicenseFiles DummyLicenseFile[]
    licenseFiles         LicenseFile[]
    lessons              Lesson[]

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([clerkOrgId])
    @@index([createdById])
}

model Instructor {
    id Int @id @default(autoincrement())

    firstName String
    lastName  String

    phone String

    account   Admin @relation(fields: [accountId], references: [id])
    accountId Int

    vehicles Vehicle[]

    licenseFiles LicenseFile[]
    lessons      Lesson[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([accountId])
}

model DummyLicenseFile {
    id           Int      @id @default(autoincrement())
    category     Category @default(B)
    dateFinished DateTime

    student   Student @relation(fields: [studentId], references: [id])
    studentId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([studentId])
}

model LicenseFile {
    id Int @id @default(autoincrement())

    status   LicenseFileStatus @default(UNDEPOSITED)
    category Category          @default(B)
    price    Int

    lessons  Lesson[]
    exams    Exam[]
    payments Payment[]

    student   Student @relation(fields: [studentId], references: [id])
    studentId Int

    instructor   Instructor @relation(fields: [instructorId], references: [id])
    instructorId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([instructorId])
    @@index([studentId])
    @@index([createdById])
}

model Exam {
    id Int @id @default(autoincrement())

    date   DateTime
    status ExamStatus
    type   ExamType

    licenseFile   LicenseFile @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([licenseFileId])
}

model Lesson {
    id Int @id @default(autoincrement())

    date     DateTime
    status   LessonStatus
    duration Int // HOURS
    price    Int
    comment  String
    grade    Int          @default(-1) // out of 100

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    payment   Payment @relation(fields: [paymentId], references: [id])
    paymentId Int     @unique

    student   Student @relation(fields: [studentId], references: [id])
    studentId Int

    instructor   Instructor @relation(fields: [instructorId], references: [id])
    instructorId Int

    licenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([createdById])
    @@index([paymentId])
    @@index([studentId])
    @@index([instructorId])
    @@index([licenseFileId])
}

model Payment {
    id Int @id @default(autoincrement())

    date    DateTime @default(now())
    sum     Int
    comment String

    // cashFund   CashFund? @relation(fields: [cashFundId], references: [id])
    // cashFundId Int?

    licenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    lesson   Lesson?
    lessonId Int?

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([licenseFileId])
    @@index([lessonId])
    // @@index([cashFundId])
    @@index([createdById])
}

model Expense {
    id Int @id @default(autoincrement())

    date    DateTime @default(now())
    sum     Int
    comment String

    vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
    vehicleId Int?

    // cashFund   CashFund? @relation(fields: [cashFundId], references: [id])
    // cashFundId Int?

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // @@index([cashFundId])

    @@index([vehicleId])
    @@index([createdById])
}

model Vehicle {
    id Int @id @default(autoincrement())

    name   String      @unique
    image  String      @default("")
    brand  String
    type   VehicleType
    active Boolean     @default(true)

    instructor   Instructor @relation(fields: [instructorId], references: [id])
    instructorId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    expenses Expense[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([instructorId])
    @@index([createdById])
}

// model CashFund {
//     id Int @id @default(autoincrement())

//     clerkOrgId String @unique

//     payments Payment[]
//     expenses Expense[]

//     sum Int @default(0)

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

enum AdminRank {
    SUPER_ADMIN
    SECRETARY
    INSTRUCTOR
}

enum LicenseFileStatus {
    UNDEPOSITED
    ONGOING
    REJECTED
    VALIDATED
}

enum LessonStatus {
    RESERVED
    DONE
    CANCELLED
}

enum ExamStatus {
    PENDING
    SUCCESS
    FAILED
}

enum ExamType {
    CODE
    DRIVING
}

enum Grade {
    TERRIBLE
    VERY_BAD
    BAD
    NO_GRADE
    OKAY
    GOOD
    EXCELLENT
}

enum Category {
    A
    B
    C
    D
}

enum VehicleType {
    CAR
    MOTORCYCLE
    TRUCK // Camion
    TRAILER // Remorque
}
