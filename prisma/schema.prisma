// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model School {
    id Int @id @default(autoincrement())

    name                String
    clerkOrgId          String @unique
    city                String @default("")
    address             String @default("")
    phone               String @default("")
    fax                 String @default("")
    email               String @default("")
    numRegistrePermis   String @default("")
    numRegistreCommerce String @default("")
    numRegistreFiscale  String @default("")
    theoryHours         String @default("0")
    practiceHours       String @default("0")

    admins      Admin[]
    students    Student[]
    instructors Instructor[]
    vehicles    Vehicle[]
    cashFund    CashFund?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Admin {
    id Int @id @default(autoincrement())

    username   String    @unique
    clerkId    String    @unique
    clerkOrgId String
    fullName   String
    rank       AdminRank

    licenseFilesCreated LicenseFile[]
    instructorsCreated  Instructor[]
    paymentsCreated     Payment[]
    expensesCreated     Expense[]
    studentsCreated     Student[]
    vehiclesCreated     Vehicle[]
    lessonsCreated      Lesson[]

    school   School @relation(fields: [schoolId], references: [id])
    schoolId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([schoolId])
}

model Student {
    id          Int    @id @default(autoincrement())
    clerkUserId String @unique
    clerkOrgId  String

    firstNameFr String
    firstNameAr String

    lastNameFr String
    lastNameAr String

    addressFr String
    addressAr String

    professionFr String
    professionAr String

    birthplaceFr String
    birthplaceAr String

    phone     String
    cin       String
    email     String
    birthdate DateTime

    cinFile        String @default("")
    profilePicture String @default("")

    archived     Boolean   @default(false)
    archivedDate DateTime?

    previousLicenseFiles DummyLicenseFile[]
    licenseFiles         LicenseFile[]
    lessons              Lesson[]

    school   School @relation(fields: [schoolId], references: [id])
    schoolId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([clerkOrgId])
    @@index([createdById])
    @@index([schoolId])
}

model Instructor {
    id Int @id @default(autoincrement())

    firstName String
    lastName  String

    phone String

    account   Admin @relation(fields: [accountId], references: [id])
    accountId Int

    vehicles     Vehicle[]
    licenseFiles LicenseFile[]
    lessons      Lesson[]

    school   School @relation(fields: [schoolId], references: [id])
    schoolId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([accountId])
    @@index([schoolId])
}

model DummyLicenseFile {
    id           Int      @id @default(autoincrement())
    category     Category @default(B)
    dateFinished DateTime

    student   Student @relation(fields: [studentId], references: [id])
    studentId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([studentId])
}

model LicenseFile {
    id Int @id @default(autoincrement())

    status   LicenseFileStatus @default(UNDEPOSITED)
    category Category          @default(B)
    price    Int

    lessons  Lesson[]
    exams    Exam[]
    payments Payment[]
    expenses Expense[]

    student   Student @relation(fields: [studentId], references: [id])
    studentId Int

    instructor   Instructor @relation(fields: [instructorId], references: [id])
    instructorId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([instructorId])
    @@index([studentId])
    @@index([createdById])
}

model Exam {
    id Int @id @default(autoincrement())

    date   DateTime
    status ExamStatus
    type   ExamType

    licenseFile   LicenseFile @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([licenseFileId])
}

model Lesson {
    id Int @id @default(autoincrement())

    date     DateTime
    status   LessonStatus
    duration Int // HOURS
    price    Int
    comment  String
    grade    Int          @default(-1) // out of 100

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    payment   Payment @relation(fields: [paymentId], references: [id])
    paymentId Int     @unique

    student   Student @relation(fields: [studentId], references: [id])
    studentId Int

    instructor   Instructor @relation(fields: [instructorId], references: [id])
    instructorId Int

    licenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([createdById])
    @@index([paymentId])
    @@index([studentId])
    @@index([instructorId])
    @@index([licenseFileId])
}

model Payment {
    id Int @id @default(autoincrement())

    date    DateTime @default(now())
    sum     Int
    comment String

    cashFund   CashFund @relation(fields: [cashFundId], references: [id])
    cashFundId Int

    licenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    lesson   Lesson?
    lessonId Int?

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([licenseFileId])
    @@index([lessonId])
    @@index([cashFundId])
    @@index([createdById])
}

model Expense {
    id Int @id @default(autoincrement())

    date    DateTime @default(now())
    sum     Int
    comment String

    vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
    vehicleId Int?

    licenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    cashFund   CashFund @relation(fields: [cashFundId], references: [id])
    cashFundId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([cashFundId])
    @@index([vehicleId])
    @@index([licenseFileId])
    @@index([createdById])
}

model Vehicle {
    id Int @id @default(autoincrement())

    name   String      @unique
    image  String      @default("")
    brand  String
    type   VehicleType
    active Boolean     @default(true)

    expenses Expense[]

    instructor   Instructor @relation(fields: [instructorId], references: [id])
    instructorId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    school   School @relation(fields: [schoolId], references: [id])
    schoolId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([instructorId])
    @@index([createdById])
    @@index([schoolId])
}

model CashFund {
    id Int @id @default(autoincrement())

    clerkOrgId String @unique

    payments Payment[]
    expenses Expense[]

    amount Int @default(0)

    school   School @relation(fields: [schoolId], references: [id])
    schoolId Int    @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([schoolId])
}

enum AdminRank {
    SUPER_ADMIN
    SECRETARY
    INSTRUCTOR
}

enum LicenseFileStatus {
    UNDEPOSITED
    ONGOING
    REJECTED
    VALIDATED
}

enum LessonStatus {
    RESERVED
    DONE
    CANCELLED
}

enum ExamStatus {
    PENDING
    SUCCESS
    FAILED
}

enum ExamType {
    CODE
    DRIVING
}

enum Grade {
    TERRIBLE
    VERY_BAD
    BAD
    NO_GRADE
    OKAY
    GOOD
    EXCELLENT
}

enum Category {
    A // Moto
    B // Voiture
    C // Camions
    EC // Remorque
}

enum VehicleType {
    MOTORCYCLE
    CAR
    TRUCK // Camion
    TRAILER // Remorque
}
