// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Admin {
    id Int @id @default(autoincrement())

    username String    @unique
    clerkId  String    @unique
    rank     AdminRank

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    licenseFilesCreated LicenseFile[]
    paymentsCreated     Payment[]
    lessonsCreated      Lesson[]

    monitors Monitor[] // Monitors have accounts that need to be linked to an Admin account
}

model Customer {
    id          Int    @id @default(autoincrement())
    clerkUserId String @unique
    clerkOrgId  String

    firstNameFr String
    firstNameAr String

    lastNameFr String
    lastNameAr String

    addressFr String
    addressAr String

    professionFr String
    professionAr String

    phone     String
    cin       String
    email     String
    birthdate DateTime

    archived     Boolean   @default(false)
    archivedDate DateTime?

    licenseFiles LicenseFile[]
    lessons      Lesson[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([clerkOrgId])
}

model Monitor {
    id Int @id @default(autoincrement())

    firstName String
    lastName  String

    phone String

    account   Admin @relation(fields: [accountId], references: [id])
    accountId Int

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    LicenseFile LicenseFile[]
    Lesson      Lesson[]
}

model LicenseFile {
    id Int @id @default(autoincrement())

    status   LicenseFileStatus
    category Category          @default(B)
    price    Int

    lessons  Lesson[]
    exams    Exam[]
    payments Payment[]

    customer   Customer @relation(fields: [customerId], references: [id])
    customerId Int

    monitor   Monitor @relation(fields: [monitorId], references: [id])
    monitorId Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([customerId, monitorId, createdById])
}

model Exam {
    id Int @id @default(autoincrement())

    date   DateTime
    status ExamStatus

    licenseFile   LicenseFile @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Lesson {
    id Int @id @default(autoincrement())

    date     DateTime
    status   LessonStatus
    duration Int // HOURS
    price    Int
    comment  String
    grade    Int

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    payment   Payment @relation(fields: [paymentId], references: [id])
    paymentId Int

    customer   Customer @relation(fields: [customerId], references: [id])
    customerId Int

    moniteur   Monitor @relation(fields: [moniteurId], references: [id])
    moniteurId Int

    LicenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id Int @id @default(autoincrement())

    date    DateTime
    sum     Int
    comment String

    LicenseFile   LicenseFile? @relation(fields: [licenseFileId], references: [id])
    licenseFileId Int?

    lessons Lesson[]

    createdBy   Admin @relation(fields: [createdById], references: [id])
    createdById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum AdminRank {
    SUPER_ADMIN
    ADMIN
    MODERATOR
    MONITOR
}

enum LicenseFileStatus {
    ONGOING
    REJECTED
    VALIDATED
}

enum LessonStatus {
    RESERVED
    DONE
    CANCELLED
}

enum ExamStatus {
    PENDING
    SUCCESS
    FAILED
}

enum Grade {
    TERRIBLE
    VERY_BAD
    BAD
    NO_GRADE
    OKAY
    GOOD
    EXCELLENT
}

enum Category {
    A
    B
    C
    D
}
